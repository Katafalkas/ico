pragma solidity ^0.4.13;

import "zeppelin-solidity/contracts/ownership/Ownable.sol";
import "zeppelin-solidity/contracts/crowdsale/RefundVault.sol";
import "./cVToken.sol";

contract cVTokenCrowdsale is Ownable {
  using SafeMath for uint256;

  /** Constants
   * ----------
   * @param kRate - Ether to CVToken rate. 1 ether is 42000 tokens.
   * @param kMinStake - Min amount of Ether that can be contributed.
   * @param kMaxStake - Max amount of Ether that can be contributed.
   * @param kTotalEth - Entire organization value in Ether.
   */
  uint256 constant kRate = 42000;
  uint256 constant kMinStake = 0.1 ether;
  uint256 constant kMaxStake = 2000 ether;
  uint256 constant kTotalEth = 200000 ether;

  // Address where funds are collected.
  address public wallet;

  // Start and end timestamps.
  uint public startTime;
  uint public endTime;

  cVToken public token;
  RefundVault public vault;

  // Waves are ICO stages. They define limits and discounts.
  struct Wave {
      uint limit;
      uint discount;
  }
  Wave[] waveList;

  // Organization balances.
  uint256 public icoBalance;
  uint256 public teamBalance;
  uint256 public foundersBalance;
  uint256 public earlyBirdsBalance;
  uint256 public legalExpensesBalance;
  uint256 public specialBalance;  // TODO - make sure 1% is minted for charity.
  uint256 public fullCrowdsaleBalance;

  // Contributors and their total contributions.
  mapping (address => uint256) private contributors;



  bool public isFinalized = false;

  uint256 public weiRaised;

  uint public currentStage = 0;

  event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount, uint256 bonus, uint stage);

  // CARVERTICAL

  uint256 constant MAX_LEVEL = 3;

  uint256 constant SOFT_CAP = 10000 ether;



  mapping (address => uint32) whitelist;

  uint256 public membersCount = 0;


  /**
   * @param _startTime Unix timestamp for the start of the token sale
   * @param _period Period of days, ICO will be open.
   * @param _wallet Ethereum address to which the invested funds are forwarded
   */
  function CVCoinCrowdsale(uint256 _startTime, uint8 _period, address _wallet) public {
    require(_startTime >= now);
    require(_period > 0);
    require(_wallet != address(0));

    startTime = _startTime;
    endTime = _startTime.add(60 * 60 * 24 * _period);
    wallet = _wallet;

    token = new CVCoin();
    vault = new RefundVault(_wallet);

    setupStages();
    setupBalances();
  }

  function setupStages() private {
    waveList.push(Wave({limit: 1050 ether, discount: 145 }));
    waveList.push(Wave({limit: 5800 ether, discount: 135 }));
    waveList.push(Wave({limit: 7000 ether, discount: 125 }));
    waveList.push(Wave({limit: 7000 ether, discount: 115 }));
    waveList.push(Wave({limit: 7000 ether, discount: 110 }));
    waveList.push(Wave({limit: 7000 ether, discount: 105 }));
  }

  function setupBalances() private {
    icoBalance = kTotalEth.mul(43).div(100);  // 86,000 Ether - HARD CAP
    teamBalance = kTotalEth.mul(14).div(100);
    foundersBalance = kTotalEth.mul(13).div(100);
    earlyBirdsBalance = kTotalEth.mul(23).div(100);
    legalExpensesBalance = kTotalEth.mul(6).div(100);
    specialBalance = kTotalEth.mul(1).div(100);
    fullCrowdsaleBalance = icoBalance.add(specialBalance);
  }

  // FAILOVER FUNC
  function () public payable {
    if (!isFinalized) {
      buyTokens();
    } else {
      claimRefund();
    }
  }

  function buyTokens() public payable {
    require(validPurchase());
    require(weiRaised.add(msg.value) <= icoBalance);

    weiRaised = weiRaised.add(msg.value);

    uint256 tokens = calculateTokensForContributedAmount(msg.value); // tokens being bought for invested amount of ether

    token.mint(msg.sender, tokens);

    contributors[msg.sender] = contributors[msg.sender].add(msg.value);
    TokenPurchase(msg.sender, msg.value, tokens, currentStage);

    actionsForPreIcoStage();
    actionsForPreIcoToIcoCrossing();
    incrementCurrentWave();
  }

  // Whitelist an address
  function addToWhitelist(address addr) public onlyOwner {
    require(whitelist[addr] == 0);
    whitelist[addr] = 1;
    membersCount = membersCount.add(1);
  }

  // Purchase validator
  function validPurchase() internal constant returns (bool) {
    bool validAddress = (msg.sender != 0x0);
    bool isWhitelisted = (msg.value <= 2.5 ether || whitelist[msg.sender] > 0);
    bool withinPeriod = (now >= startTime && now <= endTime);
    bool withinRangePurchase = (msg.value >= MIN_STAKE && msg.value <= MAX_STAKE);
    return validAddress && withinPeriod && withinRangePurchase && isWhitelisted;
  }

  // Check if wei raised crosses wave limit
  function amountIsCrossingWaveLimit() private returns (bool) {
    return (weiRaised >= stagesList[currentStage].limit);
  }

  // Add wave bonus to amount
  function addBonus(uint256 amount, Wave wave) private returns (uint256) {
    return amount.mul(wave.discount).div(100);
  }

  // Calculates the amount of tokens for contributed amount with wave bonus
  function calculateTokensForContributedAmount(uint256 amount) private returns (uint256) {
    uint256 totalAmountWithDiscount = 0;
    Wave currentWave = waveList[currentStage];
    Wave nextWave = waveList[currentStage.add(1)];

    if (amountIsCrossingWaveLimit()) {
      uint256 amountOverWaveLimit = weiRaised.sub(currentWave.limit);
      uint256 amountUnderWaveLimit = amount.sub(amountOverWaveLimit);
      uint256 underLimitAmount = addBonus(amountUnderWaveLimit, currentWave);
      uint256 overLimitAmount = addBonus(amountOverWaveLimit, nextWave);

      totalAmountWithDiscount = underLimitAmount.add(overLimitAmount);
    } else {
      totalAmountWithDiscount = addBonus(amount, currentWave);
    }

    icoBalance = icoBalance.sub(amount);

    return totalAmountWithDiscount.mul(kRate);
  }

  // Case when amount invested is still in pre-ICO stage.
  function actionsForPreIcoStage() private payable {
    require(currentStage == 0);

    wallet.transfer(this.balance);
  }

  // Case when amount invested crosses the pre-ICO and ICO stages.
  function actionsForPreIcoToIcoCrossing() private payable {
    uint256 amountBeforeThisInvestment = weiRaised.sub(msg.value);

    require((currentStage == 1 && amountBeforeThisInvestment < waveList[currentStage].limit));

    uint256 amountAvailableForRefund = weiRaised.sub(waveList[currentStage].limit);

    FOUNDERS_WALLET.transfer(this.balance.sub(amountAvailableForRefund));
    vault.deposit.value(amountAvailableForRefund)(msg.sender);
  }

  // Increment currnet wave if wei raised crosses a limit.
  function incrementCurrentWave() private {
    require(amountIsCrossingWaveLimit());
    currentStage = currentStage.add(1);
  }

  /**************************** Refunds  *****************************/

  function claimRefund() private {
      require(isFinalized);
      require(!goalReached());

      vault.refund(msg.sender);
  }

  function finalize() onlyOwner public {
      require(!isFinalized);
      require(now > endTime || icoBalance < MIN_STAKE); // MIN_STAKE = 0.1 Ether

      if (goalReached()) {
          vault.close();

          teamReward();
          bountyReward();
          foundersReward();
          earlyBirdsReward();

          token.mint(this, icoBalance.add(specialBalance).mul(kRate));
      } else {
          vault.enableRefunds();
          token.freezeForever();
      }

      isFinalized = true;
  }

  function goalReached() private constant returns (bool) {
      return weiRaised >= SOFT_CAP;
  }

  /********************* Token distribution ********************/

  function calcAdditionalTokens(address _contributor) constant public returns (uint256) {
      if (contributors[_contributor] > 0 && isFinalized) {
          uint256 totalBalanceLeft = icoBalance.add(specialBalance);
          uint256 totalSold = fullCrowdsaleBalance.sub(totalBalanceLeft);
          uint256 value = contributors[_contributor];
          return totalBalanceLeft.mul(value).div(totalSold).mul(kRate);
      }

      return 0;
  }

  function withdraw(address _contributor) public {
      uint256 additionalTokens = calcAdditionalTokens(_contributor);  // We will not be doing this as we use special tokens for other case
      if (additionalTokens > 0) {
          contributors[_contributor] = 0;
          token.transferCrowdsale(_contributor, additionalTokens);
      }
  }

  function teamReward() private {
      uint256 partPerYear = teamBalance.mul(kRate).div(4);

      teamBalance = 0;
      token.lockTill(TEAM_WALLET_1_YEAR, startTime + yearInSeconds);
      token.mint(TEAM_WALLET_1_YEAR, partPerYear);

      token.lockTill(TEAM_WALLET_2_YEAR, startTime + yearInSeconds * 2);
      token.mint(TEAM_WALLET_2_YEAR, partPerYear);

      token.lockTill(TEAM_WALLET_3_YEAR, startTime + yearInSeconds * 3);
      token.mint(TEAM_WALLET_3_YEAR, partPerYear);

      token.lockTill(TEAM_WALLET_4_YEAR, startTime + yearInSeconds * 4);
      token.mint(TEAM_WALLET_4_YEAR, partPerYear);
  }

  function bountyReward() private {
      uint256 tokens = bountyBalance.mul(kRate);
      bountyBalance = 0;
      token.mint(BOUNTY_WALLET, tokens);
  }

  function foundersReward() private {
      uint yearInSeconds = 31536000;
      uint twoYears = yearInSeconds * 2;
      token.lockTill(FOUNDERS_WALLET, startTime + twoYears);
      uint256 tokens = foundersBalance.mul(kRate);
      foundersBalance = 0;
      token.mint(FOUNDERS_WALLET, tokens);
  }

  function earlyBirdsReward() private {
      uint256 tokens = earlyBirdsBalance.mul(kRate);
      earlyBirdsBalance = 0;
      token.mint(EARLY_BIRDS_WALLET, tokens);
  }
}
